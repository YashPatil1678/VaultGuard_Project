pipeline {
  agent any

  parameters {
    string(name: 'IMAGE_TAG', defaultValue: '', description: 'Optional: image (repo:tag) to override in deployment')
  }

  environment {
    EKS_CLUSTER_NAME = 'VaultGuard-cluster'
    EKS_REGION       = 'ap-south-1'
  }

  stages {
    stage('Checkout') {
      steps {
        checkout([$class: 'GitSCM',
          branches: [[name: '*/main']],
          userRemoteConfigs: [[url: 'https://github.com/yashpatil1678/VaultGuard_Project.git']]
        ])
      }
    }

    stage('Configure kubectl') {
      steps {
        sh '''
          set -eux
          # Update kubeconfig to connect to existing EKS
          aws eks --region ${EKS_REGION} update-kubeconfig --name ${EKS_CLUSTER_NAME}

          # Verify cluster access
          kubectl get nodes
        '''
      }
    }

    stage('Deploy to EKS') {
      steps {
        sh '''
          set -eux
          # Create namespace if it doesn't exist
          kubectl apply -f k8s/Namespace.yml

          # Apply deployment manifests
          kubectl apply -f k8s/Vault_Guard_Deployment.yml

          # Override image if IMAGE_TAG is provided
          if [ -n "${IMAGE_TAG}" ]; then
            kubectl set image deployment/vault-guard vault-guard=${IMAGE_TAG} --record
          fi

          # Apply service manifest if present
          if [ -f k8s/Service.yml ]; then
            kubectl apply -f k8s/Service.yml
          fi

          # Wait for rollout to complete
          kubectl rollout status deployment/vault-guard --timeout=5m

          # List resources in namespace
          kubectl get all -n vault-guard
        '''
      }
    }
  }

  post {
    success {
      echo "✅ CD pipeline completed successfully."
    }
    failure {
      echo "❌ CD pipeline failed — check logs above."
    }
    always {
      cleanWs()
    }
  }
}
